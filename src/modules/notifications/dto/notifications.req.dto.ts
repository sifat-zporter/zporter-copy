import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { IsOptional, IsString } from 'class-validator';
import { TypeOfPost } from '../../feed/dto/feed.req.dto';
import { UserTypes } from '../../users/enum/user-types.enum';

export enum NotificationType {
  // Settings
  REMIND_ON_PROFILE = 'REMIND_ON_PROFILE',
  REMIND_ON_DIARY_UPDATE = 'REMIND_ON_DIARY_UPDATE',
  INVITE_UPDATE = 'INVITE_UPDATE',
  FEED_UPDATE = 'FEED_UPDATE',
  TEAM_TRAINING = 'TEAM_TRAINING',
  MESSAGE_UPDATE = 'MESSAGE_UPDATE',
  MATCH = 'MATCH',
  COACH_CREATE_DIARY_MATCH = 'COACH_CREATE_DIARY_MATCH',
  COACH_CREATE_DIARY_TRAINING = 'COACH_CREATE_DIARY_TRAINING',

  // Relationship
  FOLLOW = 'FOLLOW',
  FRIEND_REQUEST = 'FRIEND_REQUEST',
  FOLLOW_REQUEST = 'FOLLOW_REQUEST',
  ACCEPTED_FRIEND_REQUEST = 'ACCEPTED_FRIEND_REQUEST',
  ACCEPTED_FOLLOW_REQUEST = 'ACCEPTED_FOLLOW_REQUEST',
  REJECT_FRIEND_REQUEST = 'REJECT_FRIEND_REQUEST',
  REJECT_FOLLOW_REQUEST = 'REJECT_FOLLOW_REQUEST',

  // POST ACTIONS
  LIKE_POST = 'LIKE_POST',
  COMMENT_POST = 'COMMENT_POST',

  // TEAM
  ASK_JOIN_TEAM = 'ASK_JOIN_TEAM',
  INVITE_MEMBER_TEAM = 'INVITE_MEMBER_TEAM',
  ACCEPT_JOIN_TEAM = 'ACCEPT_JOIN_TEAM',
  REJECT_JOIN_TEAM = 'REJECT_JOIN_TEAM',
  LEAVE_TEAM = 'LEAVE_TEAM',
  DELETE_MEMBER_TEAM = 'DELETE_MEMBER_TEAM',
  BLOCK_MEMBER_TEAM = 'BLOCK_MEMBER_TEAM',
  MEMBER_CONFIRM_DELETE_MEMBER_TEAM = 'MEMBER_CONFIRM_DELETE_MEMBER_TEAM',
  MEMBER_CONFIRM_BLOCK_MEMBER_TEAM = 'MEMBER_CONFIRM_BLOCK_MEMBER_TEAM',
  ADMIN_CONFIRM_DELETE_MEMBER_TEAM = 'ADMIN_CONFIRM_DELETE_MEMBER_TEAM',
  ADMIN_CONFIRM_BLOCK_MEMBER_TEAM = 'ADMIN_CONFIRM_BLOCK_MEMBER_TEAM',
  UPGRADE_TEAM_MEMBER_TYPE = 'UPGRADE_TEAM_MEMBER_TYPE',
  DOWNGRADE_TEAM_MEMBER_TYPE = 'DOWNGRADE_TEAM_MEMBER_TYPE',
  REJECT_CREATE_TEAM = 'REJECT_CREATE_TEAM',
  ACCEPT_CREATE_TEAM = 'ACCEPT_CREATE_TEAM',

  // GROUP
  INVITE_MEMBER_GROUP = 'INVITE_MEMBER_GROUP',
  ASK_JOIN_GROUP = 'ASK_JOIN_GROUP',
  UPGRADE_GROUP_MEMBER_TYPE = 'UPGRADE_GROUP_MEMBER_TYPE',
  DOWNGRADE_GROUP_MEMBER_TYPE = 'DOWNGRADE_GROUP_MEMBER_TYPE',
  ACCEPT_JOIN_GROUP = 'ACCEPT_JOIN_GROUP',

  // MESSAGE
  SEND_MESSAGE = 'SEND_MESSAGE',
  SEND_ALL_FROM_ADMIN = 'SEND_ALL_FROM_ADMIN',

  // CLUB
  REJECT_CREATE_CLUB = 'REJECT_CREATE_CLUB',
  ACCEPT_CREATE_CLUB = 'ACCEPT_CREATE_CLUB',

  // ASK FOR REVIEWS
  ASK_FOR_REVIEW_SKILL_UPDATES = 'ASK_FOR_REVIEW_SKILL_UPDATES',
  ASK_FOR_REVIEW_DEVELOPMENT_TALK = 'ASK_FOR_REVIEW_DEVELOPMENT_TALK',

  // PLAYER OF THE WEEK
  PLAYER_OF_THE_WEEK = 'PLAYER_OF_THE_WEEK',

  // ZTAR OF THE MATCH
  ZTAR_OF_THE_MATCH = 'ZTAR_OF_THE_MATCH',

  // DREAM TEAM
  DREAM_TEAM = 'DREAM_TEAM',

  // COACH COMMENT DEVELOPMENT NOTE
  COACH_COMMENT_DEVELOPMENT_NOTE = 'COACH_COMMENT_DEVELOPMENT_NOTE',

  // TAG FEED
  TAG_FEED = 'TAG_FEED',

  // FANTAZY MANAGER
  FANTAZY_TEAM_WINNER_OF_THE_WEEK = 'FANTAZY_TEAM_WINNER_OF_THE_WEEK',
  FANTAZY_TEAM_GET_RESULT = 'FANTAZY_TEAM_GET_RESULT',
  FANTAZY_MANAGER_OF_THE_MONTH = 'FANTAZY_MANAGER_OF_THE_MONTH',
  REMIND_EDIT_FANTAZY = 'REMIND_EDIT_FANTAZY',
  HOW_MANY_PLAYER_IS_PICKED_IN_THE_FANTAZY_TEAM = 'HOW_MANY_PLAYER_IS_PICKED_IN_THE_FANTAZY_TEAM',
  NOTIFY_ABOUT_RANKING_OF_THE_FANTAZY_MANAGER = 'NOTIFY_ABOUT_RANKING_OF_THE_FANTAZY_MANAGER',

  // TEST
  VERIFY_TEST_RECORD = 'VERIFY_TEST_RECORD',
  VERIFY_TEST_RECORD_UPDATE = 'VERIFY_TEST_RECORD_UPDATE',
  CONFIRMED_TEST_RECORD = 'CONFIRMED_TEST_RECORD',
  REFUSED_TEST_RECORD = 'REFUSED_TEST_RECORD',
  ADDED_TEST_RECORD_BY_COACH = 'ADDED_TEST_RECORD_BY_COACH',
  SEND_TEST_RECORD_TO_COACH = 'SEND_TEST_RECORD_TO_COACH',

  //Calendar Event
  EVENT_CANCELLED = 'EVENT_CANCELLED',
  REJECTED_INVITATION = 'REJECTED_INVITATION',
  ACCEPTED_INVITATION = 'ACCEPTED_INVITATION',
  EVENT_INVITATION = 'EVENT_INVITATION',
  EVENT_INVITATION_UPDATE = 'EVENT_INVITATION_UPDATE',
  EVENT_ATTENDANCE_UPDATE = 'EVENT_ATTENDANCE_UPDATE',
  EVENT_REMINDER = 'EVENT_REMINDER',
  EVENT_EVALUATION = 'EVENT_EVALUATION'
}

export enum NotificationTitle {
  ZPORTER_FEED = 'Zporter Feed',
  ZPORTER_DIARY = 'Zporter Diary',
  ZPORTER_BIOGRAPHY = 'Zporter Biography',
  ZPORTER_ADMIN_MESSAGE = 'System Admin Message',
  ZPORTER_TEST_GROUP = 'Zporter Test Group',
}

// export enum NotificationImportance {
//   None = 0,
//   Min = 1,
//   Low = 2,
//   Default = 3,
//   High = 4,
//   Max = 5,
// }

export class RegistrationFCMTokenDto {
  @ApiProperty()
  @IsString()
  token: string;

  @ApiProperty()
  @IsString()
  timezone: string;
}
export class CreateNotificationDto {
  token: string[];
  notificationType: NotificationType;
  postId?: string;
  typeOfPost?: TypeOfPost;
  title: string;
  senderId: string;
  receiverId: string;
  username?: string;
  largeIcon: string;
  badge?: number;
  bigPicture: string;
  content?: string;
  userType?: UserTypes;
  topic?: string;
  others?: { [key: string]: any };
}

export class DeleteNotificationQuery {
  @ApiPropertyOptional()
  @IsString()
  @IsOptional()
  notificationId?: string;
}

export class CreateChatAllNotificationDto {
  // title: string;
  content: string;
  link: string;
  others?: { [key: string]: string };
}
